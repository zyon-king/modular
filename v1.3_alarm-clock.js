// alarm-clock.js
// Este arquivo cont√©m a l√≥gica principal do seu despertador.
// Ele depende do 'v0.1_time-multi-carousel-input.js' para os carross√©is de sele√ß√£o de tempo.

/**
 * Solicita permiss√£o ao usu√°rio para exibir notifica√ß√µes desktop e as exibe.
 * @param {string} title - O t√≠tulo da notifica√ß√£o.
 * @param {string} body - O corpo (conte√∫do) da notifica√ß√£o.
 */
function showDesktopNotification(title, body) {
    // Verifica se o navegador suporta notifica√ß√µes.
    if (!("Notification" in window)) {
        console.warn("Este navegador n√£o suporta notifica√ß√µes desktop.");
        return;
    }

    // Verifica o status atual da permiss√£o de notifica√ß√£o.
    if (Notification.permission === "granted") {
        console.log("Permiss√£o para notifica√ß√µes j√° concedida. Exibindo notifica√ß√£o...");
        new Notification(title, { body: body });
    } else if (Notification.permission === "denied") {
        console.warn("Permiss√£o para notifica√ß√µes negada. N√£o √© poss√≠vel exibir.");
    } else {
        // Solicita permiss√£o ao usu√°rio.
        Notification.requestPermission().then(permission => {
            if (permission === "granted") {
                console.log("Permiss√£o para notifica√ß√µes concedida! Exibindo notifica√ß√£o...");
                new Notification(title, { body: body });
            } else if (permission === "denied") {
                console.warn("Permiss√£o para notifica√ß√µes negada. N√£o √© poss√≠vel exibir.");
            } else {
                console.log("Permiss√£o para notifica√ß√µes n√£o foi concedida.");
            }
        }).catch(error => {
            console.error("Erro ao solicitar permiss√£o para notifica√ß√µes:", error);
        });
    }
}


// L√≥gica Principal do Despertador
document.addEventListener('DOMContentLoaded', () => {
    // --- Refer√™ncias aos elementos da UI ---
    const setAlarmButton = document.getElementById('setAlarmButton');
    const statusMessage = document.getElementById('status-message');
    const currentTimeDisplay = document.getElementById('current-time');

    // Refer√™ncias aos elementos dos r√°dio buttons de pausa e seus campos
    const opcaoDuracaoRadio = document.getElementById('opcao-duracao');
    const opcaoFimRadio = document.getElementById('opcao-fim');
    const camposDuracao = document.getElementById('campos-duracao');
    const camposFim = document.getElementById('campos-fim');

    let alarmSet = false; // Estado para controlar se um alarme est√° definido
    let alarmHour;        // Hora do alarme definido
    let alarmMinute;      // Minuto do alarme definido
    let intervalId;       // ID do setInterval para atualizar a hora atual

    // --- Fun√ß√µes de UI para L√≥gica da Pausa ---

    /**
     * Alterna a visibilidade dos campos de entrada para "Dura√ß√£o da pausa" ou "Fim da pausa"
     * com base no r√°dio button selecionado.
     */
    function togglePauseFields() {
        if (opcaoDuracaoRadio.checked) {
            camposDuracao.style.display = 'flex';
            camposFim.style.display = 'none';
        } else {
            camposDuracao.style.display = 'none';
            camposFim.style.display = 'flex';
        }
    }

    // Adiciona listeners para os r√°dio buttons para alternar os campos
    if (opcaoDuracaoRadio) { // Garante que os elementos existem antes de adicionar listeners
        opcaoDuracaoRadio.addEventListener('change', togglePauseFields);
    }
    if (opcaoFimRadio) {
        opcaoFimRadio.addEventListener('change', togglePauseFields);
    }

    // Define o estado inicial dos campos de pausa ao carregar a p√°gina
    togglePauseFields();

    // --- Fun√ß√µes Principais do Alarme ---

    /**
     * Atualiza a exibi√ß√£o da hora atual e verifica se o alarme deve disparar.
     */
    function updateCurrentTime() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        currentTimeDisplay.textContent = `Hora atual: ${hours}:${minutes}:${seconds}`;

        // Verifica se o alarme est√° ativo e se a hora atual corresponde √† hora do alarme.
        // A verifica√ß√£o de segundos √© para disparar uma √∫nica vez ao minuto exato.
        if (alarmSet && now.getHours() === alarmHour && now.getMinutes() === alarmMinute && now.getSeconds() === 0) {
            triggerAlarm();
            clearInterval(intervalId); // Para o intervalo para evitar m√∫ltiplos disparos
            alarmSet = false;           // Reseta o estado do alarme
            statusMessage.textContent = 'Alarme disparado!';
            setAlarmButton.textContent = 'Definir Alarme'; // Restaura o texto do bot√£o
        }
    }

    /**
     * Define o alarme usando os valores dos carross√©is de hora e minuto.
     */
    function setAlarm() {
        // Obt√©m a hora e o minuto do alarme principal usando as fun√ß√µes globais
        // expostas pelo script de carrossel (v0.1_time-multi-carousel-input.js).
        if (typeof getSelectedHour === 'function' && typeof getSelectedMinute === 'function') {
            alarmHour = getSelectedHour();
            alarmMinute = getSelectedMinute();
        } else {
            // Caso as fun√ß√µes do carrossel n√£o estejam dispon√≠veis, exibe um erro e retorna.
            console.error("Fun√ß√µes getSelectedHour/Minute n√£o encontradas. Verifique se o script do carrossel foi carregado corretamente ANTES deste.");
            statusMessage.textContent = 'Erro: Carross√©is n√£o carregados.';
            return;
        }

        // Valida√ß√£o b√°sica: garante que os valores foram obtidos.
        if (alarmHour === null || alarmMinute === null) {
            statusMessage.textContent = 'Por favor, defina uma hora v√°lida para o alarme.';
            return;
        }
        
        alarmSet = true; // Define o alarme como ativo
        
        const formattedAlarmTime = `${String(alarmHour).padStart(2, '0')}:${String(alarmMinute).padStart(2, '0')}`;
        statusMessage.textContent = `Alarme definido para ${formattedAlarmTime}`;
        setAlarmButton.textContent = 'Alarme Definido (Clique para Cancelar)';

        // Limpa qualquer intervalo de atualiza√ß√£o de hora anterior e inicia um novo.
        if (intervalId) {
            clearInterval(intervalId);
        }
        intervalId = setInterval(updateCurrentTime, 1000); // Atualiza a cada segundo

        updateCurrentTime(); // Atualiza a hora imediatamente ap√≥s definir o alarme

        // Dispara uma notifica√ß√£o desktop de confirma√ß√£o
        if (typeof showDesktopNotification === 'function') {
            showDesktopNotification("‚è∞ Alarme Definido!", `Seu alarme foi configurado para: ${formattedAlarmTime}`);
        }
    }

    /**
     * Dispara o alarme: toca um som e exibe uma notifica√ß√£o.
     */
    function triggerAlarm() {
        console.log('Alarme tocando!');

        // Exibe uma notifica√ß√£o desktop para o alarme.
        if (typeof showDesktopNotification === 'function') {
            showDesktopNotification(
                "üîî Despertador!",
                "A hora que voc√™ definiu chegou: " + String(alarmHour).padStart(2, '0') + ":" + String(alarmMinute).padStart(2, '0')
            );
        }

        // Toca um som de alarme.
        const audio = new Audio('https://www.soundjay.com/buttons/beep-07.mp3');
        audio.play().catch(e => console.error("Erro ao tocar √°udio:", e));

        // Para o √°udio ap√≥s 5 segundos.
        setTimeout(() => {
            audio.pause();
            audio.currentTime = 0; // Reinicia o √°udio para o in√≠cio
        }, 5000);
    }

    // --- Listeners de Eventos ---

    // Listener para o bot√£o "Definir Alarme" / "Cancelar Alarme"
    setAlarmButton.addEventListener('click', () => {
        if (alarmSet) {
            // Se o alarme estiver definido, cancela-o.
            clearInterval(intervalId);
            alarmSet = false;
            statusMessage.textContent = 'Alarme cancelado.';
            setAlarmButton.textContent = 'Definir Alarme';
        } else {
            // Se o alarme n√£o estiver definido, chama a fun√ß√£o para defini-lo.
            setAlarm();
        }
    });

    // --- Inicializa√ß√£o ao Carregar a P√°gina ---

    // Define a hora inicial do carrossel principal para a hora atual do sistema.
    // Isso usa a fun√ß√£o 'setInitialTime' exposta pelo 'v0.1_time-multi-carousel-input.js'.
    const now = new Date();
    if (typeof setInitialTime === 'function') {
        setInitialTime(now.getHours(), now.getMinutes());
    } else {
        console.warn("Fun√ß√£o setInitialTime n√£o encontrada. O carrossel principal pode n√£o inicializar com a hora atual. Certifique-se de que 'v0.1_time-multi-carousel-input.js' est√° carregado corretamente.");
    }
    
    // Atualiza a exibi√ß√£o da hora atual imediatamente ao carregar a p√°gina.
    updateCurrentTime();
});
